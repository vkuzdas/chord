syntax = "proto3";

// generate directly into "java/proto"
option java_package = "proto";

message MoveKeysRequest {
  string senderIp = 1;
  int32 senderPort = 2;
  string receiverIp = 3;
  int32 receiverPort = 4;
  int32 start = 5;
  int32 end = 6;
}

message MoveKeysResponse {
  string senderIp = 1;
  int32 senderPort = 2;
  repeated string values = 3;
}

message UpdateFingerTableRequest {
  string senderIp = 1;
  int32 senderPort = 2;
  int32 index = 3;
  string nodeIp = 4;
  int32 nodePort = 5;
}
message UpdateFingerTableResponse {
  string requestorIp = 1;
  int32 requestorPort = 2;
  string status = 3;
}

message GetSuccessorRequest {
  string requestorIp = 1;
  int32 requestorPort = 2;
}
message GetSuccessorResponse {
  string successorIp = 1;
  int32 successorPort = 2;
}

message GetPredecessorRequest {
  string requestorIp = 1;
  int32 requestorPort = 2;
}
message GetPredecessorResponse {
  string predecessorIp = 1;
  int32 predecessorPort = 2;
}

message ClosestPrecedingFingerRequest {
  string senderIp = 1;
  int32 senderPort = 2;
  int32 targetId = 3;
}
message ClosestPrecedingFingerResponse {
  string requestorIp = 1;
  int32 requestorPort = 2;
  string closestPrecedingFingerIp = 3;
  int32 closestPrecedingFingerPort = 4;
}

message FindSuccessorRequest {
  string senderIp = 1;
  int32 senderPort = 2;
  int32 targetId = 3;
}
message FindSuccessorResponse {
  string requestorIp = 1;
  int32 requestorPort = 2;
  string successorIp = 3;
  int32 successorPort = 4;
}

// Joining node sends to BootStrap node
message JoinRequest {
  string senderIp = 1;
  int32 senderPort = 2;
}
// BootStrap node responds with status
message JoinResponse {
  string senderIp = 1;
  int32 senderPort = 2;
  string status = 3;
}

message PutRequest {
  string key = 1;
  string value = 2;
}
message PutResponse {
  string key = 1;
  string value = 2;
  string status = 3;
}

message GetRequest {
  string key = 1;
  string value = 2;
}
message GetResponse {
  string key = 1;
  string value = 2;
  string status = 3;
}

service ChordService {
  // invoke findSuccessor procedure on targetNode
  rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse) {}
  // return targetNode.successor
  rpc GetSuccessor(GetSuccessorRequest) returns (GetSuccessorResponse) {}
  // return targetNode.predecessor
  rpc GetPredecessor(GetPredecessorRequest) returns (GetPredecessorResponse) {}
  rpc UpdateFingerTable(UpdateFingerTableRequest) returns (UpdateFingerTableResponse) {}
  rpc ClosestPrecedingFinger(ClosestPrecedingFingerRequest) returns (ClosestPrecedingFingerResponse) {}
  rpc Join(JoinRequest) returns (JoinResponse) {}
  rpc MoveKeys(MoveKeysRequest) returns (MoveKeysResponse) {}
  rpc Put(PutRequest) returns (PutResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
}
